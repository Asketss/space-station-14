using Content.Client.CharacterInfo;
using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
//using static Content.Client.CharacterInfo.CharacterInfoSystem;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class AntagonistsWindow : DefaultWindow
    {
        //[UISystemDependency] private readonly CharacterInfoSystem _characterInfo = default!;

        private PlayerInfo? _selectedAntagonist;

        public event Action<PlayerInfo?>? OnSelectionChanged;
        //public event Action<CharacterData>? OnCharacterUpdate;

        protected override void EnteredTree()
        {
            AntagonistsList.OnSelectionChanged += OnListOnOnSelectionChanged;
            ListOfTargetsButton.OnPressed += ListOfTargetsButtonOnPressed;
            AddTargetButton.OnPressed += AddTargetButtonOnPressed;
            //OnCharacterUpdate += CharacterUpdated;
        }

        private void OnListOnOnSelectionChanged(PlayerInfo? obj)
        {
            _selectedAntagonist = obj;
            var disableButtons = _selectedAntagonist == null;
            ListOfTargetsButton.Disabled = disableButtons;
            AddTargetButton.Disabled = disableButtons;

            //_characterInfo.RequestCharacterInfo(_selectedAntagonist?.EntityUid);
        }

        private void ListOfTargetsButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            if (_selectedAntagonist == null)
                return;

            //IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
            //    $"endgamerule {_selectedAntagonist.EntityUid}");
        }

        private void AddTargetButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            if (_selectedAntagonist == null)
                return;

            //IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
            //    $"endgamerule {_selectedAntagonist.EntityUid}");
        }

        //private void CharacterUpdated(CharacterData data)
        //{
        //    var (job, objectives, briefing, sprite, entityName) = data;

        //    //foreach (var (groupId, conditions) in objectives)
        //    //{
        //    //    var objectiveControl = new CharacterObjectiveControl
        //    //    {
        //    //        Orientation = BoxContainer.LayoutOrientation.Vertical,
        //    //        Modulate = Color.Gray
        //    //    };

        //    //    objectiveControl.AddChild(new Label
        //    //    {
        //    //        Text = groupId,
        //    //        Modulate = Color.LightSkyBlue
        //    //    });

        //    //    foreach (var condition in conditions)
        //    //    {
        //    //        var conditionControl = new ObjectiveConditionsControl();
        //    //        conditionControl.ProgressTexture.Texture = condition.SpriteSpecifier.Frame0();
        //    //        conditionControl.ProgressTexture.Progress = condition.Progress;
        //    //        var titleMessage = new FormattedMessage();
        //    //        var descriptionMessage = new FormattedMessage();
        //    //        titleMessage.AddText(condition.Title);
        //    //        descriptionMessage.AddText(condition.Description);

        //    //        conditionControl.Title.SetMessage(titleMessage);
        //    //        conditionControl.Description.SetMessage(descriptionMessage);

        //    //        objectiveControl.AddChild(conditionControl);
        //    //    }

        //    //    var briefingControl = new ObjectiveBriefingControl();
        //    //    briefingControl.Label.Text = briefing;

        //    //    objectiveControl.AddChild(briefingControl);
        //    //    _window.Objectives.AddChild(objectiveControl);
        //    //}

        //    //_window.SpriteView.Sprite = sprite;
        //    //_window.NameLabel.Text = entityName;
        //}
    }
}
